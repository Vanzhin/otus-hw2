security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    users:
      entity:
        # the class of the entity that represents users
        class: App\Users\Domain\Entity\User
        # the property to query by - e.g. email, username, etc
        property: email
  firewalls:
    login:
      pattern: ^/api/auth/token/login
      stateless: true
      json_login:
        username_path: email
        check_path: /api/auth/token/login # or api_login_check as defined in config/routes.yaml
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api_token_refresh:
      pattern: ^/api/auth/token/refresh
      stateless: true
      refresh_jwt: ~
    api_token_validate:
      pattern: ^/api/auth/token/validate
      stateless: true
      jwt: ~
    api:
      pattern: ^/api
      stateless: true
      jwt: ~
    #      отдельный файервол для эндроинтов
    endpoint:
      pattern: ^/user
      stateless: true
      jwt: ~
  access_control:
    - { path: ^/api/auth/token/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/auth/token/refresh, roles: PUBLIC_ACCESS }
    - { path: ^/api/auth/token/validate,       roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/users,       roles: PUBLIC_ACCESS, methods: [ POST ] }
    - { path: ^/api/users,       roles: IS_AUTHENTICATED_FULLY, methods: [ PUT, GET, DELETE ] }
    - { path: ^/user,       roles: IS_AUTHENTICATED_FULLY }
when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
